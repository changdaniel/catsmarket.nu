

input CreateBookInput {
  id: Int!
  title: String
  isbn10: String!
  amazon_used_price: Int
  edition: String
  image: String
}

type Book {
  id: Int!
  title: String
  isbn10: String!
  amazon_used_price: Int
  edition: String
  image: String
}

input UpdateBookInput {
  id: Int!
  title: String
  isbn10: String
  amazon_used_price: Int
  edition: String
  image: String
}

input CreateCompletedInput {
  id: Int!
  date_completed: AWSTimestamp!
  reason: String
  connection_id: Int!
}

type Completed {
  id: Int!
  date_completed: AWSTimestamp!
  reason: String
  connection_id: Int!
}

input UpdateCompletedInput {
  id: Int!
  date_completed: AWSTimestamp
  reason: String
  connection_id: Int
}

input CreateConnectionInput {
  id: Int!
  buyer_email: String!
  date_connected: AWSTimestamp!
  listing_id: Int!
}

type Connection {
  id: Int!
  buyer_email: String!
  date_connected: AWSTimestamp!
  listing_id: Int!
}

input UpdateConnectionInput {
  id: Int!
  buyer_email: String
  date_connected: AWSTimestamp
  listing_id: Int
}

input CreateCourseInput {
  id: Int!
  code: String!
  subject_code: String!
  name: String!
}

type Course {
  id: Int!
  code: String!
  subject_code: String!
  name: String!
}

input UpdateCourseInput {
  id: Int!
  code: String
  subject_code: String
  name: String
}

input CreateListingInput {
  id: Int!
  price: Int!
  date_listed: AWSTimestamp!
  seller_email: String!
  verified: Int
  book_id: Int!
}

type Listing {
  id: Int!
  price: Int!
  date_listed: AWSTimestamp!
  seller_email: String!
  verified: Int
  book_id: Int!
}

input UpdateListingInput {
  id: Int!
  price: Int
  date_listed: AWSTimestamp
  seller_email: String
  verified: Int
  book_id: Int
}

type Mutation {
  deleteBook(id: Int!): Book
  createBook(createBookInput: CreateBookInput!): Book
  updateBook(updateBookInput: UpdateBookInput!): Book
  deleteCompleted(id: Int!): Completed
  createCompleted(createCompletedInput: CreateCompletedInput!): Completed
  updateCompleted(updateCompletedInput: UpdateCompletedInput!): Completed
  deleteConnection(id: Int!): Connection
  createConnection(createConnectionInput: CreateConnectionInput!): Connection
  updateConnection(updateConnectionInput: UpdateConnectionInput!): Connection
  deleteCourse(id: Int!): Course
  createCourse(createCourseInput: CreateCourseInput!): Course
  updateCourse(updateCourseInput: UpdateCourseInput!): Course
  deleteListing(id: Int!): Listing
  createListing(createListingInput: CreateListingInput!): Listing
  updateListing(updateListingInput: UpdateListingInput!): Listing
}

type Query {
  getBook(id: Int!): Book
  listBooks: [Book]
  getCompleted(id: Int!): Completed
  listCompleteds: [Completed]
  getConnection(id: Int!): Connection
  listConnections: [Connection]
  getCourse(id: Int!): Course
  listCourses: [Course]
  getListing(id: Int!): Listing
  listListings: [Listing]
}

type Subscription {
  onCreateBook: Book @aws_subscribe(mutations: ["createBook"])
  onCreateCompleted: Completed @aws_subscribe(mutations: ["createCompleted"])
  onCreateConnection: Connection @aws_subscribe(mutations: ["createConnection"])
  onCreateCourse: Course @aws_subscribe(mutations: ["createCourse"])
  onCreateListing: Listing @aws_subscribe(mutations: ["createListing"])
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
